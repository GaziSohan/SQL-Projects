WITH active_inactive_cust AS
(SELECT 
  cust.CustomerID, 
  cont.Firstname, 
  cont.LastName, 
  CONCAT(cont.Firstname,' ',cont.LastName) AS FullName,
  IFNULL(cont.Title, CONCAT('Dear', ' ', cont.LastName)) AS addressing_title,
  cont.EmailAddress, 
  cont.Phone, 
  cust.AccountNumber, 
  cust.CustomerType,
  addr.City,
  stat_prov.Name AS State,
  countr_reg.Name AS Country,
  CONCAT(addr.AddressLine1, ', ', addr.AddressLine2) AS Address,
  COUNT(sale_ord_head.SalesOrderID) AS Number_Orders,
  ROUND(SUM(sale_ord_head.SubTotal + sale_ord_head.TaxAmt),2) AS Total_Amt_Purch,
  DATE(last_sales_table.orderdate) AS Last_Order_Date

FROM `adwentureworks_db.customer` cust
INNER JOIN `adwentureworks_db.individual` ind ON ind.CustomerID = cust.CustomerID
--We are using INNER JOIN in case of joining "Individual" table because it will take only the CustomerType = 'I' from Customer table.
INNER JOIN `adwentureworks_db.contact` cont ON cont.ContactID = ind.ContactID
INNER JOIN `adwentureworks_db.customeraddress` cust_addr ON cust_addr.CustomerID = cust.CustomerID
INNER JOIN `adwentureworks_db.address` addr ON addr.AddressID = cust_addr.AddressID
INNER JOIN `adwentureworks_db.stateprovince` stat_prov ON stat_prov.StateProvinceID = addr.StateProvinceID
INNER JOIN `adwentureworks_db.countryregion` countr_reg ON countr_reg.CountryRegionCode = stat_prov.CountryRegionCode 
INNER JOIN `adwentureworks_db.salesorderheader` sale_ord_head ON sale_ord_head.CustomerID = cust.CustomerID

INNER JOIN
(
	SELECT 
    sales.customerid,
    ARRAY_AGG(sales.orderdate order by orderdate desc limit 1) [offset(0)] AS orderdate
	FROM `adwentureworks_db.salesorderheader` sales
	GROUP BY sales.customerid
) last_sales_table on cust.customerid = last_sales_table.customerid
--Creating a temp table with 2 columns from a pre-existing table

GROUP BY 
  cust.CustomerID,
  cont.Firstname,
  cont.LastName,
  cont.Title,
  cont.Emailaddress,
  cont.Phone,
  cust.AccountNumber,
  cust.CustomerType,
  addr.City,
  stat_prov.Name,
  countr_reg.Name,
  addr.AddressLine1,
  addr.AddressLine2,
  last_sales_table.orderdate
  ORDER BY Total_Amt_Purch)
  --LIMIT 200)

SELECT 
  active_inactive_cust.*,
  DATE_DIFF(
    (SELECT DATE(OrderDate)
      FROM `adwentureworks_db.salesorderheader`
      ORDER BY OrderDate DESC
      LIMIT 1),active_inactive_cust.Last_Order_Date,DAY) AS Diff,

      CASE 
      WHEN DATE_DIFF(
        (SELECT DATE(OrderDate)
        FROM `adwentureworks_db.salesorderheader`
        ORDER BY OrderDate DESC
        LIMIT 1),active_inactive_cust.Last_Order_Date,DAY)>=365 
      THEN 'Inactive'
      ELSE 'Active'
    END AS customer_status 

FROM active_inactive_cust
INNER JOIN `adwentureworks_db.salesorderheader` AS sales
ON active_inactive_cust.CustomerID = sales.CustomerID
WHERE active_inactive_cust.Number_Orders = 2
ORDER BY active_inactive_cust.CustomerID DESC



Note: 1.3 Enrich your original 1.1 SELECT by creating a new column in the view that marks active & inactive customers based on whether they have ordered anything during the last 365 days.
